{"version":3,"file":"create-emit-callback.js","sourceRoot":"","sources":["../../../src/lib/ngc/create-emit-callback.ts"],"names":[],"mappings":";AAAA,wFAAwF;AACxF,0EAA0E;AAC1E,uIAAuI;;AAEvI;;;;;;GAMG;AAEH,4IAA4I;AAC5I,MAAM,eAAe,GAAG,oEAAoE,CAAC;AAK7F,kGAAkG;AAClG,SAAgB,kBAAkB,CAAC,OAA4B;IAC7D,MAAM,mBAAmB,GAAG,OAAO,CAAC,aAAa,KAAK,YAAY,CAAC;IACnE,MAAM,uBAAuB,GAAG,OAAO,CAAC,0BAA0B,CAAC;IACnE,IAAI,CAAC,mBAAmB,IAAI,CAAC,uBAAuB,EAAE;QACpD,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,mBAAmB,EAAE;QACvB,mFAAmF;QACnF,iEAAiE;QACjE,mCAAmC;QACnC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;KACtC;IACD,MAAM,WAAW,GAWb;QACF,2BAA2B,EAAE,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;QACpG,gBAAgB,EAAE,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,CAAC,EAAE;QAC/C,2BAA2B,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK;QAC/C,kBAAkB,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ;QACxC,UAAU,EAAE,KAAK;QACjB,OAAO,EAAE,IAAI;QACb,2BAA2B,EAAE,KAAK;QAClC,mBAAmB;QACnB,uBAAuB;KACxB,CAAC;IAEF,IAAI,OAAO,CAAC,0BAA0B,IAAI,OAAO,CAAC,aAAa,KAAK,eAAe,EAAE;QACnF,OAAO,CAAC,EACN,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB,kBAAkB,GAAG,EAAE,EACvB,IAAI,EACJ,OAAO,GACR,EAAE,EAAE,CACH,OAAO,CAAC,SAAS,CAAC,CAAC,eAAe,CAChC,OAAO,oBACF,WAAW,IAAE,OAAO,EAAE,oBAAoB,EAAE,IAAI,KACrD,IAAI,EACJ,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB;YACE,QAAQ,EAAE,kBAAkB,CAAC,MAAM;YACnC,OAAO,EAAE,kBAAkB,CAAC,KAAK;SAClC,CACF,CAAC;KACL;SAAM;QACL,OAAO,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,GAAG,EAAE,EAAE,EAAE,EAAE,CAChH,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE;YAC7E,KAAK,EAAE,kBAAkB,CAAC,KAAK;YAC/B,MAAM,EAAE,kBAAkB,CAAC,MAAM;SAClC,CAAC,CAAC;KACN;AACH,CAAC;AAnED,gDAmEC","sourcesContent":["// XX: internal in ngc's `main()`, a tsickle emit callback is passed to the tsc compiler\n// ... blatanlty copy-paste the emit callback here. it's not a public api.\n// ... @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/main.ts#L36-L38\n\n/*\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/transformers/util.ts#L14\nconst GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\n\nimport * as tsickle from 'tsickle';\nimport * as api from '@angular/compiler-cli/src/transformers/api';\n\n// @link https://github.com/angular/angular/blob/83d207d/packages/compiler-cli/src/main.ts#L42-L84\nexport function createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback | undefined {\n  const transformDecorators = options.annotationsAs !== 'decorators';\n  const transformTypesToClosure = options.annotateForClosureCompiler;\n  if (!transformDecorators && !transformTypesToClosure) {\n    return undefined;\n  }\n  if (transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n  const tsickleHost: Pick<\n    tsickle.TsickleHost,\n    | 'shouldSkipTsickleProcessing'\n    | 'pathToModuleName'\n    | 'shouldIgnoreWarningsForPath'\n    | 'fileNameToModuleId'\n    | 'googmodule'\n    | 'untyped'\n    | 'convertIndexImportShorthand'\n    | 'transformDecorators'\n    | 'transformTypesToClosure'\n  > = {\n    shouldSkipTsickleProcessing: fileName => /\\.d\\.ts$/.test(fileName) || GENERATED_FILES.test(fileName),\n    pathToModuleName: (_context, _importPath) => '',\n    shouldIgnoreWarningsForPath: _filePath => false,\n    fileNameToModuleId: fileName => fileName,\n    googmodule: false,\n    untyped: true,\n    convertIndexImportShorthand: false,\n    transformDecorators,\n    transformTypesToClosure,\n  };\n\n  if (options.annotateForClosureCompiler || options.annotationsAs === 'static fields') {\n    return ({\n      program,\n      targetSourceFile,\n      writeFile,\n      cancellationToken,\n      emitOnlyDtsFiles,\n      customTransformers = {},\n      host,\n      options,\n    }) =>\n      require('tsickle').emitWithTsickle(\n        program,\n        { ...tsickleHost, options, moduleResolutionHost: host },\n        host,\n        options,\n        targetSourceFile,\n        writeFile,\n        cancellationToken,\n        emitOnlyDtsFiles,\n        {\n          beforeTs: customTransformers.before,\n          afterTs: customTransformers.after,\n        },\n      );\n  } else {\n    return ({ program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers = {} }) =>\n      program.emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, {\n        after: customTransformers.after,\n        before: customTransformers.before,\n      });\n  }\n}\n"]}